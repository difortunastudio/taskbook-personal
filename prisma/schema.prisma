generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
  files     File[]
  links     Link[]
  projects  Project[]
  tasks     Task[]
  businessRecords BusinessRecord[]
  tags      Tag[]

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  cif           String?
  accountNumber String?
  password      String?
  notes         String?
  color         String?   @default("#3B82F6")
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  files         File[]
  links         Link[]
  projects      Project[]
  tasks         Task[]
  businessRecords BusinessRecord[]
  tags          CompanyTag[]

  @@map("companies")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  files       File[]
  links       Link[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  notes       String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  companyId   String?
  projectId   String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tags        TaskTag[]

  @@map("tasks")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  size         Int
  mimeType     String
  path         String
  companyId    String?
  projectId    String?
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Link {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  category    String?
  companyId   String?
  projectId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company     Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("links")
}

model BusinessRecord {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String
  type        String   // "contable", "decision", "nota"
  reference   String?  // Referencia opcional
  
  // Relaciones
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        BusinessRecordTag[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("memoria_contable")
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       TaskTag[]
  companies   CompanyTag[]
  businessRecords BusinessRecordTag[]

  @@unique([name, userId])
  @@map("tags")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model CompanyTag {
  id        String  @id @default(cuid())
  companyId String
  tagId     String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([companyId, tagId])
  @@map("company_tags")
}

model BusinessRecordTag {
  id               String         @id @default(cuid())
  businessRecordId String
  tagId            String
  businessRecord   BusinessRecord @relation(fields: [businessRecordId], references: [id], onDelete: Cascade)
  tag              Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([businessRecordId, tagId])
  @@map("business_record_tags")
}

model Idea {
  id        String   @id @default(cuid())
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]
  files     File[]
  links     Link[]
  projects  Project[]
  tasks     Task[]

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  cif           String?
  accountNumber String?
  password      String?
  notes         String?
  color         String?   @default("#3B82F6")
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  files         File[]
  links         Link[]
  projects      Project[]
  tasks         Task[]

  @@map("companies")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  files       File[]
  links       Link[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  notes       String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  companyId   String?
  projectId   String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  size         Int
  mimeType     String
  path         String
  companyId    String?
  projectId    String?
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Link {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  category    String?
  companyId   String?
  projectId   String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company     Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("links")
}

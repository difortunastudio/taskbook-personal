generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  companies Company[]
  tasks     Task[]
  projects  Project[]
  links     Link[]
  files     File[]
}

model Company {
  id            String   @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  cif           String?
  accountNumber String?
  password      String?
  color         String   @default("#3B82F6")
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  tasks    Task[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  companyId   String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks   Task[]
  links   Link[]
  files   File[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  companyId   String?
  projectId   String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Link {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  projectId   String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  projectId   String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
